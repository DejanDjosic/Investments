{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dejan\\\\Desktop\\\\radnidir\\\\Investments\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport ResultTable from \"./components/ResultTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [yearlyDataArray, setYearlyDataArray] = useState([]);\n  if (yearlyDataArray) {\n    console.log('nista');\n  }\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No investment calculated yet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }, this);\n  const calculateHandler = userInput => {\n    const yearlyData = [];\n    let currentSavings = +userInput[\"current-savings\"];\n    const yearlyContribution = +userInput[\"yearly-contribution\"];\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setYearlyDataArray(yearlyData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSaveData: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {\n      results: yearlyDataArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QmG/yJVdh4RP0ObhSuq3u0BdCJY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Form","ResultTable","jsxDEV","_jsxDEV","App","_s","yearlyDataArray","setYearlyDataArray","console","log","content","children","fileName","_jsxFileName","lineNumber","columnNumber","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","onSaveData","results","_c","$RefreshReg$"],"sources":["C:/Users/Dejan/Desktop/radnidir/Investments/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport ResultTable from \"./components/ResultTable\";\n\nfunction App() {\n  const [yearlyDataArray, setYearlyDataArray] = useState([]);\n  if(yearlyDataArray)\n  {\n    console.log('nista');\n  }\nlet content=<p>No investment calculated yet.</p>\n\n  const calculateHandler = (userInput) => {\n    const yearlyData = [];\n    let currentSavings = +userInput[\"current-savings\"];\n    const yearlyContribution = +userInput[\"yearly-contribution\"];\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n   \n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution,\n        });\n      }\n      setYearlyDataArray(yearlyData);\n    }\n\n  return (\n    <div>\n      <Header />\n      <Form onSaveData={calculateHandler} />\n      <ResultTable results={yearlyDataArray}/>\n      {content}\n      {/* {!isValidInput ? content: content=<ResultTable results={yearlyDataArray} />} */}\n    </div>\n  );\n  }\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,IAAGQ,eAAe,EAClB;IACEE,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACtB;EACF,IAAIC,OAAO,gBAACP,OAAA;IAAAQ,QAAA,EAAG;EAA6B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE9C,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC,MAAMC,UAAU,GAAG,EAAE;IACrB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC;IAClD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC;IAC5D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAIrC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAb,kBAAkB,CAACW,UAAU,CAAC;EAChC,CAAC;EAEH,oBACEf,OAAA;IAAAQ,QAAA,gBACER,OAAA,CAACJ,MAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVZ,OAAA,CAACH,IAAI;MAAC4B,UAAU,EAAEZ;IAAiB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCZ,OAAA,CAACF,WAAW;MAAC4B,OAAO,EAAEvB;IAAgB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EACvCL,OAAO;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAER;AAACV,EAAA,CAxCMD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}